{"version":3,"file":"PrivacyInfo.js","names":["_plist","data","_interopRequireDefault","require","_path","_XcodeProjectFile","_Xcodeproj","_","obj","__esModule","default","withPrivacyInfo","config","_config$ios","privacyManifests","ios","withXcodeProject","projectConfig","setPrivacyInfo","projectName","getProjectName","modRequest","projectRoot","existingFileContent","readBuildSourceFile","project","modResults","nativeProjectRoot","platformProjectRoot","filePath","path","join","parsedContent","plist","parse","mergedContent","mergePrivacyInfo","contents","build","createBuildSourceFile","fileContents","overwrite","existing","_ref","_privacyManifests$NSP","_privacyManifests$NSP2","_privacyManifests$NSP3","_privacyManifests$NSP4","NSPrivacyAccessedAPITypes","NSPrivacyCollectedDataTypes","NSPrivacyTracking","NSPrivacyTrackingDomains","structuredClone","forEach","newType","existingType","find","t","NSPrivacyAccessedAPIType","push","_existingType$NSPriva","NSPrivacyAccessedAPITypeReasons","Set","concat","NSPrivacyCollectedDataType","_existingType$NSPriva2","NSPrivacyCollectedDataTypePurposes"],"sources":["../../src/ios/PrivacyInfo.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\nimport path from 'path';\nimport type { XcodeProject } from 'xcode';\n\nimport { createBuildSourceFile, readBuildSourceFile } from './XcodeProjectFile';\nimport { getProjectName } from './utils/Xcodeproj';\nimport { ExportedConfigWithProps, withXcodeProject } from '..';\n\nexport type PrivacyInfo = {\n  NSPrivacyAccessedAPITypes: {\n    NSPrivacyAccessedAPIType: string;\n    NSPrivacyAccessedAPITypeReasons: string[];\n  }[];\n  NSPrivacyCollectedDataTypes: {\n    NSPrivacyCollectedDataType: string;\n    NSPrivacyCollectedDataTypeLinked: boolean;\n    NSPrivacyCollectedDataTypeTracking: boolean;\n    NSPrivacyCollectedDataTypePurposes: string[];\n  }[];\n  NSPrivacyTracking: boolean;\n  NSPrivacyTrackingDomains: string[];\n};\n\nexport function withPrivacyInfo(config: ExpoConfig): ExpoConfig {\n  const privacyManifests = config.ios?.privacyManifests;\n  if (!privacyManifests) {\n    return config;\n  }\n\n  return withXcodeProject(config, (projectConfig: ExportedConfigWithProps<XcodeProject>) => {\n    return setPrivacyInfo(projectConfig, privacyManifests);\n  });\n}\n\nexport function setPrivacyInfo(\n  projectConfig: ExportedConfigWithProps<XcodeProject>,\n  privacyManifests: Partial<PrivacyInfo>\n) {\n  const projectName = getProjectName(projectConfig.modRequest.projectRoot);\n\n  const existingFileContent = readBuildSourceFile({\n    project: projectConfig.modResults,\n    nativeProjectRoot: projectConfig.modRequest.platformProjectRoot,\n    filePath: path.join(projectName, 'PrivacyInfo.xcprivacy'),\n  });\n  const parsedContent = existingFileContent ? plist.parse(existingFileContent) : {};\n  const mergedContent = mergePrivacyInfo(parsedContent, privacyManifests);\n  const contents = plist.build(mergedContent);\n\n  projectConfig.modResults = createBuildSourceFile({\n    project: projectConfig.modResults,\n    nativeProjectRoot: projectConfig.modRequest.platformProjectRoot,\n    fileContents: contents,\n    filePath: path.join(projectName, 'PrivacyInfo.xcprivacy'),\n    overwrite: true,\n  });\n\n  return projectConfig;\n}\n\nexport function mergePrivacyInfo(\n  existing: Partial<PrivacyInfo>,\n  privacyManifests: Partial<PrivacyInfo>\n): PrivacyInfo {\n  let {\n    NSPrivacyAccessedAPITypes = [],\n    NSPrivacyCollectedDataTypes = [],\n    NSPrivacyTracking = false,\n    NSPrivacyTrackingDomains = [],\n  } = structuredClone(existing);\n  // tracking is a boolean, so we can just overwrite it\n  NSPrivacyTracking = privacyManifests.NSPrivacyTracking ?? existing.NSPrivacyTracking ?? false;\n  // merge the api types – for each type ensure the key is in the array, and if it is add the reason if it's not there\n  privacyManifests.NSPrivacyAccessedAPITypes?.forEach((newType) => {\n    const existingType = NSPrivacyAccessedAPITypes.find(\n      (t) => t.NSPrivacyAccessedAPIType === newType.NSPrivacyAccessedAPIType\n    );\n    if (!existingType) {\n      NSPrivacyAccessedAPITypes.push(newType);\n    } else {\n      existingType.NSPrivacyAccessedAPITypeReasons = [\n        ...new Set(\n          existingType?.NSPrivacyAccessedAPITypeReasons?.concat(\n            ...newType.NSPrivacyAccessedAPITypeReasons\n          )\n        ),\n      ];\n    }\n  });\n  // merge the collected data types – for each type ensure the key is in the array, and if it is add the purposes if it's not there\n  privacyManifests.NSPrivacyCollectedDataTypes?.forEach((newType) => {\n    const existingType = NSPrivacyCollectedDataTypes.find(\n      (t) => t.NSPrivacyCollectedDataType === newType.NSPrivacyCollectedDataType\n    );\n    if (!existingType) {\n      NSPrivacyCollectedDataTypes.push(newType);\n    } else {\n      existingType.NSPrivacyCollectedDataTypePurposes = [\n        ...new Set(\n          existingType?.NSPrivacyCollectedDataTypePurposes?.concat(\n            ...newType.NSPrivacyCollectedDataTypePurposes\n          )\n        ),\n      ];\n    }\n  });\n  // merge the tracking domains\n  NSPrivacyTrackingDomains = [\n    ...new Set(NSPrivacyTrackingDomains.concat(privacyManifests.NSPrivacyTrackingDomains ?? [])),\n  ];\n\n  return {\n    NSPrivacyAccessedAPITypes,\n    NSPrivacyCollectedDataTypes,\n    NSPrivacyTracking,\n    NSPrivacyTrackingDomains,\n  };\n}\n"],"mappings":"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"}